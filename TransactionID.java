/*State Street Bank transaction ID generator programmed by Group 2 of CSCI 362 
This Java class is to be used by a separate test class to create a random 
24-digit transaction ID for a customer account.*/
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;//Scanner class used for reading csv file.

public class TransactionID
{
    //Initialize char array of 62 elements.
    final private char[] digits = new char[62];

    //Initialize Scanner class object to read csv file.
    private Scanner read;

    //CSV file to read.
    //final private String filePath = "customers.csv";
    private String filePath;

    //Nine tokens to collect from csv file. Instance variables(fields).
    private String account = "";
    private String company = "";
    private String firstName = "";
    private String lastName = "";
    private String address1 = "";
    private String address2 = "";
    private String city = "";
    private String state = "";
    private String zipCode = "";

    //A one argument constructor.
    public TransactionID(String filePath)
    {
        this.filePath = filePath;

        //Three for loops to populate array with alphanumeric characters.
        int index = 0;
        for(char a = '0'; a <= '9'; a++)
        {
            this.digits[index++] = a;
        }
        index = 10;
        for(char b = 'A'; b <= 'Z'; b++)
        {
            this.digits[index++] = b;
        }
        index = 36;
        for(char c = 'a'; c <= 'z'; c++)
        {
            this.digits[index++] = c;
        }
    }

    //Accessor method used to obtain contents of digits array.
    public char[] getArray()
    {
        return this.digits;
    }

    //Accessor method returns a random digit generated by random() method of Math class.
    public char randomCharDigit()
    {
        return digits[(int)Math.floor(Math.random() * digits.length)];
    }

    //Accessor method to assign a String variable for 24-digit transaction ID.
    public String getTransactionID()
    {
        //Initialize StringBuilder class object.
        StringBuilder result = new StringBuilder();
        for(int i = 0; i < 24; i++)//For loop to add 24 char values to String.
        {
            result.append(randomCharDigit());
        }
        return result.toString();//Returns toString method of StringBuilder class object.
    }

    //Void method to assign all customer records a transaction ID.
    public void readRecord()
    //public void readRecord(String filePath)
    //public String[] readRecord()
    {
        int index = 0;//Count number of customers.
        //String[] transID = new String[469];

        try {
            read = new Scanner(new File(filePath));//Opens customers.csv file
            read.useDelimiter("[,\n]");//Delimiter to parse String tokens.
            
            read.nextLine();//Skip header of csv file.

            while(read.hasNext())//while loop to search customer record.
            {
                index++;
         
                /*For loop that does not store tokens to String variables for
                zero-knowledge customer information.*/
                /*for(int token = 0; token < 9; token++)
                {
                    read.next();
                }*/
                
                account = read.next();
                company = read.next();
                firstName = read.next();
                lastName = read.next();
                address1 = read.next();
                address2 = read.next();
                city = read.next();
                state = read.next();
                zipCode = read.next();

                //Stores transaction ID's into String array.
                //transID[index] = getTransactionID();

                String transID = getTransactionID();
                /*System.out.printf("%-3d %-24s %-35s %-15s %-15s %s%n",
                 index, account, company, firstName, lastName, transID);*/

                //Prints transaction ID's without the stored String variables.
                System.out.printf("%-3d %s%n", index, transID);
            }
        } 
        catch (Exception e)
        {
            System.out.println("Error.");
        }
        finally
        {
            read.close();
        }
        //Returns String array containing transaction ID's.
        //return transID;
    }//End of readRecord method
}//End of TransacationID class.